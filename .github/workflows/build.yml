name: build

on:
  push:
    paths-ignore:
      - ".github/**.md"
      - "demo/**"
      - "docker/**"
      - "tools/**"
      - "README.md"
      - "README_zh-CN.md"

  pull_request:
    paths-ignore:
      - ".github/**.md"
      - "demo/**"
      - "docker/**"
      - "docs/**"
      - "docs_zh-CN/**"
      - "tools/**"
      - "README.md"
      - "README_zh-CN.md"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_cpu:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        python-version: [3.7]
        torch: [1.5.0, 1.7.0, 1.9.0]
        include:
          - torch: 1.5.0
            torchvision: 0.6.0
          - torch: 1.7.0
            torchvision: 0.8.1
          - torch: 1.9.0
            torchvision: 0.10.0
            python-version: 3.7
          - torch: 1.9.0
            torchvision: 0.10.0
            python-version: 3.8
          - torch: 1.9.0
            torchvision: 0.10.0
            python-version: 3.9
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Upgrade pip
        run: pip install pip --upgrade
      - name: Install soundfile lib
        run: sudo apt-get install -y libsndfile1
      - name: Install onnx
        run: pip install onnx
      - name: Install librosa and soundfile
        run: pip install librosa soundfile
      - name: Install lmdb
        run: pip install lmdb
      - name: Install TurboJpeg lib
        run: sudo apt-get install -y libturbojpeg
      - name: Install PyTorch
        run: pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html
      - name: Install timm
        run: python -m pip install timm==0.6.7
        if: ${{matrix.torch == '1.5.0'}}
      - name: Install timm
        run: python -m pip install timm
        if: ${{matrix.torch != '1.5.0'}}
      - name: Install MMCV
        run: pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch${{matrix.torch}}/index.html
      - name: Install MMDet
        run: pip install git+https://github.com/open-mmlab/mmdetection/
      - name: Install MMCls
        run: pip install git+https://github.com/open-mmlab/mmclassification/
      - name: Install unittest dependencies
        run: pip install -r requirements/tests.txt -r requirements/optional.txt
      - name: Install PytorchVideo
        run: pip install pytorchvideo
        if: ${{matrix.torchvision == '0.10.0'}}
      - name: Build and install
        run: rm -rf .eggs && pip install -e .
      - name: Run unittests and generate coverage report
        run: |
          coverage run --branch --source mmaction -m pytest tests/
          coverage xml
          coverage report -m
  build_cu101:
    runs-on: ubuntu-18.04
    container:
      image: pytorch/pytorch:1.6.0-cuda10.1-cudnn7-devel

    strategy:
      matrix:
        python-version: [3.7]
        torch: [1.5.0+cu101, 1.6.0+cu101, 1.7.0+cu101]
        include:
          - torch: 1.5.0+cu101
            torch_version: torch1.5
            torchvision: 0.6.0+cu101
          - torch: 1.6.0+cu101
            torch_version: torch1.6
            torchvision: 0.7.0+cu101
          - torch: 1.7.0+cu101
            torch_version: torch1.7
            torchvision: 0.8.1+cu101
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Upgrade pip
        run: pip install pip --upgrade
      - name: Fetch GPG keys
        run: |
          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub
          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub
      - name: Install CUDA
        run: |
          apt-get update && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libturbojpeg libsndfile1 libsm6 libxrender-dev libxext6 python${{matrix.python-version}}-dev
          apt-get clean
          rm -rf /var/lib/apt/lists/*
      - name: Install librosa and soundfile
        run: python -m pip install librosa soundfile
      - name: Install lmdb
        run: python -m pip install lmdb
      - name: Install PyTorch
        run: python -m pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html
      - name: Install mmaction dependencies
        run: |
          python -V
          python -m pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cu101/${{matrix.torch_version}}/index.html
          CFLAGS=`python -c 'import sysconfig;print("-I"+sysconfig.get_paths()["include"])'`  python -m pip install -q git+https://github.com/open-mmlab/mmdetection/
          python -m pip install -q git+https://github.com/open-mmlab/mmclassification/
          python -m pip install -r requirements.txt
          python -c 'import mmcv; print(mmcv.__version__)'
      - name: Build and install
        run: rm -rf .eggs && pip install -e .
      - name: Run unittests and generate coverage report
        run: |
          coverage run --branch --source mmaction -m pytest tests/ -k 'not timm'
          coverage xml
          coverage report -m
      # Only upload coverage report for python3.7 && pytorch1.5
      - name: Upload coverage to Codecov
        if: ${{matrix.torch == '1.5.0+cu101' && matrix.python-version == '3.7'}}
        uses: codecov/codecov-action@v1.0.14
        with:
          file: ./coverage.xml
          flags: unittests
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: false

  build_cu102:
    runs-on: ubuntu-18.04
    container:
      image: pytorch/pytorch:1.9.0-cuda10.2-cudnn7-devel

    strategy:
      matrix:
        python-version: [3.7]
        torch: [1.9.0+cu102]
        include:
          - torch: 1.9.0+cu102
            torch_version: torch1.9
            torchvision: 0.10.0+cu102
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Upgrade pip
        run: pip install pip --upgrade
      - name: Fetch GPG keys
        run: |
          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub
          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub
      - name: Install CUDA
        run: |
          apt-get update && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libturbojpeg libsndfile1 libsm6 libxrender-dev libxext6 python${{matrix.python-version}}-dev
          apt-get clean
          rm -rf /var/lib/apt/lists/*
      - name: Install librosa and soundfile
        run: python -m pip install librosa soundfile
      - name: Install lmdb
        run: python -m pip install lmdb
      - name: Install PyTorch
        run: python -m pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html
      - name: Install timm
        run: python -m pip install timm
      - name: Install mmaction dependencies
        run: |
          python -V
          python -m pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cu102/${{matrix.torch_version}}/index.html
          CFLAGS=`python -c 'import sysconfig;print("-I"+sysconfig.get_paths()["include"])'`  python -m pip install -q git+https://github.com/open-mmlab/mmdetection/
          python -m pip install -q git+https://github.com/open-mmlab/mmclassification/
          python -m pip install -r requirements.txt
          python -c 'import mmcv; print(mmcv.__version__)'
      - name: Install PytorchVideo
        run: python -m pip install pytorchvideo
        if: ${{matrix.torchvision == '0.10.0+cu102'}}
      - name: Build and install
        run: rm -rf .eggs && pip install -e .
      - name: Run unittests and generate coverage report
        run: |
          coverage run --branch --source mmaction -m pytest tests/
          coverage xml
          coverage report -m

  test_windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022]
        python: [3.8]
        platform: [cpu]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Upgrade pip
        run: python -m pip install pip --upgrade --user
      - name: Install librosa and soundfile
        run: python -m pip install librosa soundfile
      - name: Install lmdb
        run: python -m pip install lmdb
      - name: Install PyTorch
        # As a complement to Linux CI, we test on PyTorch LTS version
        run: pip install torch==1.8.2+${{ matrix.platform }} torchvision==0.9.2+${{ matrix.platform }} -f https://download.pytorch.org/whl/lts/1.8/torch_lts.html
      - name: Install timm
        run: python -m pip install timm
      - name: Install MMCV
        run: pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch1.8/index.html --only-binary mmcv-full
      - name: Install mmaction dependencies
        run: |
          python -V
          python -m pip install -q git+https://github.com/open-mmlab/mmdetection/
          python -m pip install -q git+https://github.com/open-mmlab/mmclassification/
          python -m pip install -r requirements.txt
          python -c 'import mmcv; print(mmcv.__version__)'
      - name: Install PytorchVideo
        run: python -m pip install pytorchvideo
      - name: Show pip list
        run: pip list
      - name: Build and install
        run: pip install -e .
      - name: Run unittests
        run: coverage run --branch --source mmedit -m pytest tests -sv
