version: 2.1

# the default pipeline parameters, which will be updated according to
# the results of the path-filtering orb
parameters:
  lint_only:
    type: boolean
    default: true

jobs:
  lint:
    docker:
      - image: cimg/python:3.7.4
    steps:
      - checkout
      - run:
          name: Install pre-commit hook
          command: |
            pip install pre-commit
            pre-commit install
      - run:
          name: Linting
          command: pre-commit run --all-files
      - run:
          name: Check docstring coverage
          command: |
            pip install interrogate
            interrogate -v --ignore-init-method --ignore-module --ignore-nested-functions --ignore-regex "__repr__" --fail-under 50 mmaction
  build_cpu:
    parameters:
      # The python version must match available image tags in
      # https://circleci.com/developer/images/image/cimg/python
      python:
        type: string
      torch:
        type: string
      torchvision:
        type: string
    docker:
      - image: cimg/python:<< parameters.python >>
    resource_class: large
    steps:
      - checkout
      - run:
          name: Get MMCV_TORCH as environment variables
          command: |
            . .circleci/scripts/get_mmcv_var.sh << parameters.torch >>
            source $BASH_ENV
      - run:
          name: Install Libraries
          command: |
            sudo add-apt-repository ppa:savoury1/ffmpeg4
            sudo apt-get update
            sudo apt-get upgrade
            sudo apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libsm6 libxrender-dev libxext6 libturbojpeg pkg-config
            sudo apt-get install -y libavdevice-dev libavfilter-dev libopus-dev libvpx-dev libsrtp2-dev libsndfile1
      - run:
          name: Configure Python & pip
          command: |
            python -m pip install --upgrade pip
            python -m pip install wheel
      - run:
          name: Install PyTorch
          command: |
            python -V
            python -m pip install torch==<< parameters.torch >>+cpu torchvision==<< parameters.torchvision >>+cpu -f https://download.pytorch.org/whl/torch_stable.html
      - when:
          condition:
            equal: [ "1.13.0", << parameters.torch >> ]
          steps:
            - run: python -m pip install timm
      - when:
          condition:
            equal: [ "1.6.0", << parameters.torch >> ]
          steps:
            - run: python -m pip install timm==0.6.7
      - run:
          name: Install mmaction dependencies
          command: |
            python -m pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch${MMCV_TORCH}/index.html
            python -m pip install --upgrade pip numpy
            python -m pip install mmdet
            python -m pip install mmcls
            python -m pip install -r requirements.txt
      - when:
          condition:
            equal: [ "0.14.0", << parameters.torchvision >> ]
          steps:
            - run: python -m pip install pytorchvideo
      - run:
          name: Build and install
          command: |
            python -m pip install -e .
      - run:
          name: Run unittests
          command: |
            python -m coverage run --branch --source mmaction -m pytest tests/
            python -m coverage xml
            python -m coverage report -m

  build_cuda:
    parameters:
      torch:
        type: string
      cuda:
        type: enum
        enum: ["10.1", "10.2", "11.1"]
      cudnn:
        type: integer
        default: 7
    machine:
      image: ubuntu-2004-cuda-11.4:202110-01
      docker_layer_caching: true
    resource_class: gpu.nvidia.small
    steps:
      - checkout
      - run:
          name: Get MMCV_TORCH and MMCV_CUDA as environment variables
          command: |
            . .circleci/scripts/get_mmcv_var.sh << parameters.torch >> << parameters.cuda >>
            source $BASH_ENV
      - run:
          name: Build Docker image
          command: |
            docker build .circleci/docker -t mmaction:gpu --build-arg PYTORCH=<< parameters.torch >> --build-arg CUDA=<< parameters.cuda >> --build-arg CUDNN=<< parameters.cudnn >>
            docker run --gpus all -t -d -v /home/circleci/project:/mmaction -w /mmaction --name mmaction mmaction:gpu
            docker exec mmaction apt-get update
            docker exec mmaction apt-get upgrade -y
            docker exec mmaction apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libsm6 libxrender-dev libxext6 libturbojpeg pkg-config
            docker exec mmaction apt-get install -y libavdevice-dev libavfilter-dev libopus-dev libvpx-dev libsrtp2-dev libsndfile1
      - run:
          name: Install mmaction dependencies
          command: |
            docker exec mmaction pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/${MMCV_CUDA}/torch${MMCV_TORCH}/index.html
            docker exec mmaction pip install git+https://github.com/open-mmlab/mmdetection/
            docker exec mmaction pip install git+https://github.com/open-mmlab/mmclassification/
            docker exec mmaction pip install -r requirements.txt
            docker exec mmaction pip install --upgrade pip numpy
      - when:
          condition:
            equal: [ "1.8.1", << parameters.torch >> ]
          steps:
            - run: docker exec mmaction pip install timm
      - when:
          condition:
            equal: [ "1.6.0", << parameters.torch >> ]
          steps:
            - run: docker exec mmaction pip install timm==0.6.7
      - when:
          condition:
            equal: [ "10.2", << parameters.cuda >> ]
          steps:
            - run: docker exec mmaction python -m pip install pytorchvideo
      - run:
          name: Build and install
          command: |
            docker exec mmaction pip install -e .
      - run:
          name: Run unittests
          command: |
            docker exec mmaction python -m pytest tests/

workflows:
  pr_stage_lint:
    when: << pipeline.parameters.lint_only >>
    jobs:
      - lint:
          name: lint
          filters:
            branches:
              ignore:
                - master
  pr_stage_test:
    when:
      not:
        << pipeline.parameters.lint_only >>
    jobs:
      - lint:
          name: lint
          filters:
            branches:
              ignore:
                - master
      - build_cpu:
          name: minimum_version_cpu
          torch: 1.6.0
          torchvision: 0.7.0
          python: 3.7.4
          requires:
            - lint
      - build_cpu:
          name: maximum_version_cpu
          torch: 1.13.0
          torchvision: 0.14.0
          python: 3.9.0
          requires:
            - minimum_version_cpu
      - hold:
          type: approval
          requires:
            - maximum_version_cpu
      - build_cuda:
          name: mainstream_version_gpu
          torch: 1.8.1
          # Use double quotation mark to explicitly specify its type
          # as string instead of number
          cuda: "10.2"
          requires:
            - hold
  merge_stage_test:
    when:
      not:
        << pipeline.parameters.lint_only >>
    jobs:
      - build_cuda:
          name: minimum_version_gpu
          torch: 1.6.0
          # Use double quotation mark to explicitly specify its type
          # as string instead of number
          cuda: "10.1"
          filters:
            branches:
              only:
                - master
